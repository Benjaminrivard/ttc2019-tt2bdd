aspect OBDD {

  syn BDD TruthTable.fullOBDD() {
    BDD bdd = emptyBDD();

    for (BDD_Leaf terminal: terminalNodeMap(bdd).values()) {
      bdd.addTree(terminal);
    }

    PortOrder portOrder = getPortOrder();

    BDD_Subtree root = new BDD_Subtree();
    root.setPort(bdd.bddInputPort(portOrder.getPortList().get(0)));
    bdd.addTree(root);
    bdd.setRoot(root);

    Port leafPort = portOrder.leafPort();
    for (Row row : getRowList()) {
      insertRow(bdd, root, row, 0);
    }

    return bdd;
  }

  public void TruthTable.insertRow(BDD bdd, BDD_Subtree parent, Row row, int position) {

    InputPort port = getPortOrder().getPortList().get(position);
    Boolean value = row.valueFor(port);

    if (position < getPortOrder().getPortList().size() - 1) {
      BDD_InputPort nextPort = bdd.bddInputPort(getPortOrder().getPortList().get(position + 1));
      if (value == null || value) {
        BDD_Subtree result;
        if (parent.getTreeForOne() != null) {
          result = parent.getTreeForOne().asSubtree();
        } else {
          result = new BDD_Subtree();
          result.setPort(nextPort);
          parent.setTreeForOne(result);
          bdd.addTree(result);
        }
        insertRow(bdd, result, row, position + 1);
      }
      if (value == null || !value) {
        BDD_Subtree result;
        if (parent.getTreeForZero() != null) {
          result = parent.getTreeForZero().asSubtree();
        } else {
          result = new BDD_Subtree();
          result.setPort(nextPort);
          parent.setTreeForZero(result);
          bdd.addTree(result);
        }
        insertRow(bdd, result, row, position + 1);
      }
    } else {
      BDD_Leaf terminal = terminalNodeMap(bdd).get(row.outputString());
      if (value == null) {
        if (parent.getTreeForOne() != null || parent.getTreeForZero() != null) {
          logger.warn("found duplicate row");
        }
        parent.setTreeForOne(terminal);
        parent.setTreeForZero(terminal);
      } else if (value) {
        if (parent.getTreeForOne() != null) {
          logger.warn("found duplicate row");
        }
        parent.setTreeForOne(terminal);
      } else {
        if (parent.getTreeForZero() != null) {
          logger.warn("found duplicate row");
        }
        parent.setTreeForZero(terminal);
      }
    }
  }

  syn Map<String, BDD_Leaf> TruthTable.terminalNodeMap(BDD bdd) {
    Map<String, BDD_Leaf> result = new HashMap<>(getNumRow());
    for (Row row: getRowList()) {
      String outputString = row.outputString();
      if (!result.containsKey(outputString)) {
        BDD_Leaf terminal = new BDD_Leaf();
        for (Cell cell: row.getCellList()) {
          Port cellPort = cell.getPort();
          if (!cellPort.isInput()) {
            BDD_Assignment a = new BDD_Assignment();
            a.setPort(bdd.bddOutputPort(cellPort.asOutput()));
            a.setValue(cell.getValue());
            terminal.addAssignment(a);
          }
        }
        result.put(row.outputString(), terminal);
      }
    }
    return result;
  }
}
